{"ast":null,"code":"import axios from 'axios';\nconst LOGIN_USER_KEY = 'LOGIN_USER_KEY';\nvar baseURL; // if (\n//   process.env.REACT_APP_ENVIRONMENT &&\n//   process.env.REACT_APP_ENVIRONMENT === \"PRODUCTION\"\n// ) {\n//   baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else\n\nbaseURL = \"https://backend-refresh-drinks.herokuapp.com/\";\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(config => {\n  if (localStorage.getItem(LOGIN_USER_KEY)) {\n    config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n  }\n\n  return config;\n}, err => {\n  console.error(err);\n});\nexport default class API {\n  constructor() {\n    this.signUp = async (user_name, email, password) => {\n      const savedPost = await api.post('/users/signup/', {\n        user_name: user_name,\n        email: email,\n        password: password\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedPost;\n    };\n\n    this.signIn = async (email, password) => {\n      const savedPost = await api.post('/users/signin/', {\n        email: email,\n        password: password\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedPost;\n    };\n\n    this.getUsers = async () => {\n      const posts = await api.get('/users/').then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return posts;\n    };\n\n    this.getItems = async () => {\n      let url = '/items/';\n      const items = await api.get(url).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return items;\n    };\n\n    this.getCarts = async () => {\n      const carts = await api.get('/carts/').then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return carts;\n    };\n\n    this.addCarts = async item_id => {\n      const savedCart = await api.post('/carts/add/', {\n        item: item_id,\n        quantity: 1\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedCart;\n    };\n\n    this.updateCarts = async (cart_id, quantity) => {\n      const savedCart = await api.put('/carts/update/' + cart_id + '/', {\n        quantity: quantity\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedCart;\n    };\n\n    this.deleteCarts = async cart_id => {\n      const response = await api.delete('/carts/delete/' + cart_id + '/').then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return response;\n    };\n\n    this.orderAdd = async (params = {}) => {\n      const order = await api.post('/orders/add/', params).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return order;\n    };\n\n    this.getPosts = async () => {\n      const posts = await api.get('/posts/').then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return posts;\n    };\n\n    this.addPost = async (name, body, image) => {\n      const formData = new FormData();\n      formData.append('name', name);\n      formData.append('body', body);\n      formData.append('image', image);\n      const savedPost = await api.post('/posts/add/', formData).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedPost;\n    };\n\n    this.deletePost = async id => {\n      const response = await api.delete('/posts/delete/' + id + '/').then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return response;\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/tamirugebresilese/Desktop/frontend/src/API.js"],"names":["axios","LOGIN_USER_KEY","baseURL","api","create","headers","interceptors","request","use","config","localStorage","getItem","common","JSON","parse","token","err","console","error","API","signUp","user_name","email","password","savedPost","post","then","response","data","catch","Error","signIn","getUsers","posts","get","getItems","url","items","getCarts","carts","addCarts","item_id","savedCart","item","quantity","updateCarts","cart_id","put","deleteCarts","delete","orderAdd","params","order","getPosts","addPost","name","body","image","formData","FormData","append","deletePost","id"],"mappings":"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","sourcesContent":["import axios from 'axios';\nconst LOGIN_USER_KEY = 'LOGIN_USER_KEY';\n\nvar baseURL;\n// if (\n//   process.env.REACT_APP_ENVIRONMENT &&\n//   process.env.REACT_APP_ENVIRONMENT === \"PRODUCTION\"\n// ) {\n//   baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else\nbaseURL = \"https://backend-refresh-drinks.herokuapp.com/\";\n\n\nconst api = axios.create({\n    baseURL: baseURL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\napi.interceptors.request.use(\n    config => {\n        if (localStorage.getItem(LOGIN_USER_KEY)) {\n            config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n        }\n\n        return config;\n    },\n    err => {\n        console.error(err);\n    }\n);\n\nexport default class API {\n    //////////////////////////////\n    // USERS\n    /////////////////////////////\n\n    signUp = async (user_name, email, password) => {\n        const savedPost = await api\n            .post('/users/signup/', {\n                user_name: user_name,\n                email: email,\n                password: password\n            })\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return savedPost;\n    };\n\n    signIn = async (email, password) => {\n        const savedPost = await api\n            .post('/users/signin/', {\n                email: email,\n                password: password\n            })\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return savedPost;\n    };\n\n    getUsers = async () => {\n        const posts = await api\n            .get('/users/')\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return posts;\n    };\n\n    // ///////////////////////////////////////\n    // Items\n    // ///////////////////////////////////////\n\n    getItems = async () => {\n        let url = '/items/';\n        const items = await api\n            .get(url)\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return items;\n    };\n\n    // ///////////////////////////////////////\n    // Carts\n    // //////////////////////////////////////\n\n    getCarts = async () => {\n        const carts = await api\n            .get('/carts/')\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return carts;\n    };\n\n    addCarts = async item_id => {\n        const savedCart = await api\n            .post('/carts/add/', {\n                item: item_id,\n                quantity: 1\n            })\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return savedCart;\n    };\n\n    updateCarts = async (cart_id, quantity) => {\n        const savedCart = await api\n            .put('/carts/update/' + cart_id + '/', {\n                quantity: quantity\n            })\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return savedCart;\n    };\n\n    deleteCarts = async cart_id => {\n        const response = await api\n            .delete('/carts/delete/' + cart_id + '/')\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return response;\n    };\n\n    ////////////////////////////////////////////\n    // Order/Checkout\n    // ////////////////////////////////////////\n\n    orderAdd = async (params = {}) => {\n        const order = await api\n            .post('/orders/add/', params)\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return order;\n    };\n\n    ///////////////////////////////////////////\n    // Reference Post\n    //////////////////////////////////////////\n\n    getPosts = async () => {\n        const posts = await api\n            .get('/posts/')\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return posts;\n    };\n\n    addPost = async (name, body, image) => {\n        const formData = new FormData();\n        formData.append('name', name);\n        formData.append('body', body);\n        formData.append('image', image);\n        const savedPost = await api\n            .post('/posts/add/', formData)\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return savedPost;\n    };\n\n    deletePost = async id => {\n        const response = await api\n            .delete('/posts/delete/' + id + '/')\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return response;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}