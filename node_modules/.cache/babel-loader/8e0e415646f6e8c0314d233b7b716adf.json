{"ast":null,"code":"import API from \"../../API\";\nimport { signInAction, signUpAction, signOutAction } from \"./actions\";\nimport { push } from \"connected-react-router\";\nconst api = new API();\nconst LOGIN_USER_KEY = \"LOGIN_USER_KEY\";\nexport const fetchUserFromLocalStorage = () => {\n  return async dispatch => {\n    const userJSON = localStorage.getItem(LOGIN_USER_KEY);\n\n    if (userJSON && userJSON.token !== \"\") {\n      dispatch(signInAction(JSON.parse(userJSON)));\n    }\n  };\n};\nexport const signUp = (user_name, email, password) => {\n  return async dispatch => {\n    // Validation\n    if (user_name === \"\" || email === \"\" || password === \"\") {\n      alert(\"Please fill out name, email, and password.\");\n      return false;\n    }\n\n    return api.signUp(user_name, email, password).then(user => {\n      dispatch(signUpAction(user));\n      localStorage.setItem(LOGIN_USER_KEY, JSON.stringify(user));\n      dispatch(push(\"/\"));\n    }).catch(error => {\n      alert(\"Failed to connect API to add a post\");\n      console.log(error);\n    });\n  };\n};\nexport const signIn = (email, password) => {\n  return async dispatch => {\n    // Validation\n    if (email === \"\" || password === \"\") {\n      alert(\"Please fill out email and password.\");\n      return false;\n    }\n\n    return api.signIn(email, password).then(user => {\n      dispatch(signInAction(user));\n      localStorage.setItem(LOGIN_USER_KEY, JSON.stringify(user));\n      dispatch(push(\"/\"));\n    }).catch(error => {\n      alert(\"Failed to connect API to add a post\");\n      console.log(error);\n    });\n  };\n};\nexport const signOut = () => {\n  return async dispatch => {\n    dispatch(signOutAction());\n    localStorage.removeItem(LOGIN_USER_KEY);\n    dispatch(push(\"/signin\"));\n  };\n};","map":{"version":3,"sources":["/Users/tamirugebresilese/Desktop/frontend/src/reducks/users/operations.js"],"names":["API","signInAction","signUpAction","signOutAction","push","api","LOGIN_USER_KEY","fetchUserFromLocalStorage","dispatch","userJSON","localStorage","getItem","token","JSON","parse","signUp","user_name","email","password","alert","then","user","setItem","stringify","catch","error","console","log","signIn","signOut","removeItem"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,WAAhB;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,aAArC,QAA0D,WAA1D;AACA,SAASC,IAAT,QAAqB,wBAArB;AAEA,MAAMC,GAAG,GAAG,IAAIL,GAAJ,EAAZ;AACA,MAAMM,cAAc,GAAG,gBAAvB;AAEA,OAAO,MAAMC,yBAAyB,GAAG,MAAM;AAC7C,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqBL,cAArB,CAAjB;;AACA,QAAIG,QAAQ,IAAIA,QAAQ,CAACG,KAAT,KAAmB,EAAnC,EAAuC;AACrCJ,MAAAA,QAAQ,CAACP,YAAY,CAACY,IAAI,CAACC,KAAL,CAAWL,QAAX,CAAD,CAAb,CAAR;AACD;AACF,GALD;AAMD,CAPM;AASP,OAAO,MAAMM,MAAM,GAAG,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,QAAnB,KAAgC;AACpD,SAAO,MAAOV,QAAP,IAAoB;AACzB;AACA,QAAIQ,SAAS,KAAK,EAAd,IAAoBC,KAAK,KAAK,EAA9B,IAAoCC,QAAQ,KAAK,EAArD,EAAyD;AACvDC,MAAAA,KAAK,CAAC,4CAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAED,WAAOd,GAAG,CACPU,MADI,CACGC,SADH,EACcC,KADd,EACqBC,QADrB,EAEJE,IAFI,CAEEC,IAAD,IAAU;AACdb,MAAAA,QAAQ,CAACN,YAAY,CAACmB,IAAD,CAAb,CAAR;AACAX,MAAAA,YAAY,CAACY,OAAb,CAAqBhB,cAArB,EAAqCO,IAAI,CAACU,SAAL,CAAeF,IAAf,CAArC;AACAb,MAAAA,QAAQ,CAACJ,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,KANI,EAOJoB,KAPI,CAOGC,KAAD,IAAW;AAChBN,MAAAA,KAAK,CAAC,qCAAD,CAAL;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAVI,CAAP;AAWD,GAlBD;AAmBD,CApBM;AAsBP,OAAO,MAAMG,MAAM,GAAG,CAACX,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO,MAAOV,QAAP,IAAoB;AACzB;AACA,QAAIS,KAAK,KAAK,EAAV,IAAgBC,QAAQ,KAAK,EAAjC,EAAqC;AACnCC,MAAAA,KAAK,CAAC,qCAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAED,WAAOd,GAAG,CACPuB,MADI,CACGX,KADH,EACUC,QADV,EAEJE,IAFI,CAEEC,IAAD,IAAU;AACdb,MAAAA,QAAQ,CAACP,YAAY,CAACoB,IAAD,CAAb,CAAR;AACAX,MAAAA,YAAY,CAACY,OAAb,CAAqBhB,cAArB,EAAqCO,IAAI,CAACU,SAAL,CAAeF,IAAf,CAArC;AACAb,MAAAA,QAAQ,CAACJ,IAAI,CAAC,GAAD,CAAL,CAAR;AACD,KANI,EAOJoB,KAPI,CAOGC,KAAD,IAAW;AAChBN,MAAAA,KAAK,CAAC,qCAAD,CAAL;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAVI,CAAP;AAWD,GAlBD;AAmBD,CApBM;AAsBP,OAAO,MAAMI,OAAO,GAAG,MAAM;AAC3B,SAAO,MAAOrB,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACL,aAAa,EAAd,CAAR;AACAO,IAAAA,YAAY,CAACoB,UAAb,CAAwBxB,cAAxB;AACAE,IAAAA,QAAQ,CAACJ,IAAI,CAAC,SAAD,CAAL,CAAR;AACD,GAJD;AAKD,CANM","sourcesContent":["import API from \"../../API\";\nimport { signInAction, signUpAction, signOutAction } from \"./actions\";\nimport { push } from \"connected-react-router\";\n\nconst api = new API();\nconst LOGIN_USER_KEY = \"LOGIN_USER_KEY\";\n\nexport const fetchUserFromLocalStorage = () => {\n  return async (dispatch) => {\n    const userJSON = localStorage.getItem(LOGIN_USER_KEY);\n    if (userJSON && userJSON.token !== \"\") {\n      dispatch(signInAction(JSON.parse(userJSON)));\n    }\n  };\n};\n\nexport const signUp = (user_name, email, password) => {\n  return async (dispatch) => {\n    // Validation\n    if (user_name === \"\" || email === \"\" || password === \"\") {\n      alert(\"Please fill out name, email, and password.\");\n      return false;\n    }\n\n    return api\n      .signUp(user_name, email, password)\n      .then((user) => {\n        dispatch(signUpAction(user));\n        localStorage.setItem(LOGIN_USER_KEY, JSON.stringify(user));\n        dispatch(push(\"/\"));\n      })\n      .catch((error) => {\n        alert(\"Failed to connect API to add a post\");\n        console.log(error);\n      });\n  };\n};\n\nexport const signIn = (email, password) => {\n  return async (dispatch) => {\n    // Validation\n    if (email === \"\" || password === \"\") {\n      alert(\"Please fill out email and password.\");\n      return false;\n    }\n\n    return api\n      .signIn(email, password)\n      .then((user) => {\n        dispatch(signInAction(user));\n        localStorage.setItem(LOGIN_USER_KEY, JSON.stringify(user));\n        dispatch(push(\"/\"));\n      })\n      .catch((error) => {\n        alert(\"Failed to connect API to add a post\");\n        console.log(error);\n      });\n  };\n};\n\nexport const signOut = () => {\n  return async (dispatch) => {\n    dispatch(signOutAction());\n    localStorage.removeItem(LOGIN_USER_KEY);\n    dispatch(push(\"/signin\"));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}